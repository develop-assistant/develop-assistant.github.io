<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>当我遇上你</title>
  
  <subtitle>当我遇上你的博客</subtitle>
  <link href="https://idea360.cn/atom.xml" rel="self"/>
  
  <link href="https://idea360.cn/"/>
  <updated>2022-10-20T13:39:13.795Z</updated>
  <id>https://idea360.cn/</id>
  
  <author>
    <name>当我遇上你</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring-es</title>
    <link href="https://idea360.cn/2022/10/20/springboot-es/"/>
    <id>https://idea360.cn/2022/10/20/springboot-es/</id>
    <published>2022-10-20T13:31:57.000Z</published>
    <updated>2022-10-20T13:39:13.795Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring流重复消费</title>
    <link href="https://idea360.cn/2022/06/26/spring-stream/"/>
    <id>https://idea360.cn/2022/06/26/spring-stream/</id>
    <published>2022-06-26T03:47:32.000Z</published>
    <updated>2022-07-23T12:56:10.248Z</updated>
    
    <content type="html"><![CDATA[<h1 id="response流复制"><a class="markdownIt-Anchor" href="#response流复制"></a> Response流复制</h1><h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><p>前段时间有个需求, 需要是要业务在web层增加操作日志。 实现基于 <code>aop</code> 实现的。但是有几个接口返回 <code>void</code>, 实际的数据流通过 <code>response.getWriter().write</code> 这样返回的。对于业务结果是分成功和失败的, 但是aop中拿不到返回结果, 所以才有了以下的实现。</p><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><p><strong>分析</strong>: 由于spring中的流只能被消费一次, 所以本质上还是通过流复制来解决。实际解决如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogRecordFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ContentCachingResponseWrapper responseWrapper = <span class="keyword">new</span> ContentCachingResponseWrapper(response);</span><br><span class="line">        filterChain.doFilter(request, responseWrapper);</span><br><span class="line">        responseWrapper.copyBodyToResponse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;@annotation(xxx.web.logrecord.annotation.LogRecord)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">logPointCut</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object ret = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行主逻辑</span></span><br><span class="line">            ret = joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果执行失败, 不记录操作日志</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.nonNull(ret) &amp;&amp; ret <span class="keyword">instanceof</span> RespResult) &#123;</span><br><span class="line">            RespResult respResult = (RespResult)ret;</span><br><span class="line">            <span class="keyword">if</span> (respResult.getType() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果返回值未void, 数据通过response写入, 有执行失败业务码, 不记录操作日志</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(ret)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                HttpServletResponse response = ((ServletRequestAttributes) Objects.requireNonNull(RequestContextHolder.getRequestAttributes())).getResponse();</span><br><span class="line">                <span class="keyword">if</span> (Objects.nonNull(response)) &#123;</span><br><span class="line">                    <span class="keyword">byte</span>[] contentAsByteArray = ((ContentCachingResponseWrapper) response).getContentAsByteArray();</span><br><span class="line">                    RespResult respResult = objectMapper.readValue(contentAsByteArray, RespResult.class);</span><br><span class="line">                    <span class="keyword">if</span> (respResult.getType() == <span class="number">0</span>) &#123;</span><br><span class="line">                        LogRecordContext.clear();</span><br><span class="line">                        <span class="keyword">return</span> ret;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// 不符合预期, 程序正常执行结束, 不做干预</span></span><br><span class="line">                log.error(<span class="string">&quot;[xxx] void response err&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h1><p>本文到此结束，感谢阅读。如果您觉得不错，请关注公众号【当我遇上你】，您的支持是我写作的最大动力。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;response流复制&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#response流复制&quot;&gt;&lt;/a&gt; Response流复制&lt;/h1&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#</summary>
      
    
    
    
    <category term="spring" scheme="https://idea360.cn/categories/spring/"/>
    
    
    <category term="spring" scheme="https://idea360.cn/tags/spring/"/>
    
    <category term="filter" scheme="https://idea360.cn/tags/filter/"/>
    
    <category term="aop" scheme="https://idea360.cn/tags/aop/"/>
    
    <category term="stream" scheme="https://idea360.cn/tags/stream/"/>
    
    <category term="流" scheme="https://idea360.cn/tags/%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>springboot配置内存数据库h2</title>
    <link href="https://idea360.cn/2022/06/19/springboot-h2/"/>
    <id>https://idea360.cn/2022/06/19/springboot-h2/</id>
    <published>2022-06-19T11:35:44.000Z</published>
    <updated>2022-06-19T11:40:37.049Z</updated>
    
    <content type="html"><![CDATA[<ol><li>pom</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>application.properties</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">dynamic-form</span></span><br><span class="line"><span class="comment"># 应用服务 WEB 访问端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># h2 内存数据库,内存模式连接配置 库名: dynamic-form</span></span><br><span class="line"><span class="comment">#spring.datasource.url=jdbc:h2:mem:dynamic-form</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:h2:file:./data/dynamic-form</span></span><br><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">org.h2.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">admin</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"># 初始化数据表 DDL</span></span><br><span class="line"><span class="comment">#spring.datasource.schema=classpath:sql/init.sql</span></span><br><span class="line"><span class="comment"># 初始化数据 DML</span></span><br><span class="line"><span class="comment">#spring.datasource.data=classpath:sql/data.sql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.jpa.database-platform</span>=<span class="string">org.hibernate.dialect.H2Dialect</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="meta">spring.jpa.properties.hibernate.use_sql_comments</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.jpa.properties.hibernate.format_sql</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启console访问,默认false, http://localhost:8080/h2-console</span></span><br><span class="line"><span class="meta">spring.h2.console.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># h2 访问路径上下文</span></span><br><span class="line"><span class="meta">spring.h2.console.path</span>=<span class="string">/h2-console</span></span><br><span class="line"><span class="comment"># 开启h2 console 跟踪,方便调试,默认 false</span></span><br><span class="line"><span class="meta">spring.h2.console.settings.trace</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 不允许console远程访问,默认false</span></span><br><span class="line"><span class="meta">spring.h2.console.settings.web-allow-others</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta">logging.level.cn.idea360.dynamicform</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure><ol start="3"><li>entity</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完整表单也可以直接存储为json</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cuishiying</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table(name = &quot;form&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Form</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表单名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>orm</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FormRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Form</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>junit5</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;主表单单元测试&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormRepositoryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> FormRepository formRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DisplayName(&quot;新建表单&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addForm</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Form form = <span class="keyword">new</span> Form();</span><br><span class="line">        form.setName(<span class="string">&quot;动态表单&quot;</span>);</span><br><span class="line">        Form save = formRepository.save(form);</span><br><span class="line">        assertEquals(<span class="number">1</span>, save.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;pom&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2</summary>
      
    
    
    
    <category term="springboot" scheme="https://idea360.cn/categories/springboot/"/>
    
    
    <category term="springboot" scheme="https://idea360.cn/tags/springboot/"/>
    
    <category term="h2" scheme="https://idea360.cn/tags/h2/"/>
    
  </entry>
  
  <entry>
    <title>Http反向代理</title>
    <link href="https://idea360.cn/2022/04/25/http-proxy/"/>
    <id>https://idea360.cn/2022/04/25/http-proxy/</id>
    <published>2022-04-25T14:38:09.000Z</published>
    <updated>2022-04-25T14:46:11.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>背景: 有些时候需要对一些接口进行透传, 由于没有任何逻辑, 我们无需直到请求响应对象到底是什么样的, 原样输入输出即可</p><h1 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.corsdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonNode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.TextNode;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StreamUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cuishiying</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022-04-21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;JsonNode&gt; <span class="title">redirect</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String routeUrl,</span></span></span><br><span class="line"><span class="function"><span class="params">            String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String redirectUrl = createRedictUrl(request, routeUrl, prefix);</span><br><span class="line">            RequestEntity&lt;<span class="keyword">byte</span>[]&gt; requestEntity = createRequestEntity(request, redirectUrl);</span><br><span class="line">            <span class="keyword">return</span> route(requestEntity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;RoutingDelegate请求错误, request: &#123;&#125;, err: &#123;&#125;&quot;</span>, request, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">new</span> TextNode(<span class="string">&quot;RoutingDelegate err&quot;</span>), HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 原始请求:</span></span><br><span class="line"><span class="comment">     * http://localhost:7110/eachbot-knowledge-proxy-web/delegate/get/1?name=admin</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> routeUrl 代理请求: http://localhost:8088</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix 原请求需要截取掉的路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 代理完整URL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">createRedictUrl</span><span class="params">(HttpServletRequest request, String routeUrl, String prefix)</span> </span>&#123;</span><br><span class="line">        String queryString = request.getQueryString();</span><br><span class="line">        <span class="keyword">return</span> routeUrl + request.getRequestURI().replace(prefix, <span class="string">&quot;&quot;</span>) + (queryString != <span class="keyword">null</span> ? <span class="string">&quot;?&quot;</span> + queryString : <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ResponseEntity&lt;JsonNode&gt; <span class="title">route</span><span class="params">(RequestEntity&lt;<span class="keyword">byte</span>[]&gt; requestEntity)</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        <span class="keyword">return</span> restTemplate.exchange(requestEntity, JsonNode.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建请求体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> RequestEntity&lt;<span class="keyword">byte</span>[]&gt; createRequestEntity(HttpServletRequest request, String url)</span><br><span class="line">            <span class="keyword">throws</span> URISyntaxException, IOException &#123;</span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        HttpMethod httpMethod = HttpMethod.resolve(method);</span><br><span class="line">        MultiValueMap&lt;String, String&gt; headers = parseRequestHeader(request);</span><br><span class="line">        <span class="keyword">byte</span>[] body = parseRequestBody(request);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RequestEntity&lt;&gt;(body, headers, httpMethod, <span class="keyword">new</span> URI(url));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建请求体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] parseRequestBody(HttpServletRequest request) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        InputStream inputStream = request.getInputStream();</span><br><span class="line">        <span class="keyword">return</span> StreamUtils.copyToByteArray(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建请求头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> MultiValueMap&lt;String, String&gt; <span class="title">parseRequestHeader</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        List&lt;String&gt; headerNames = Collections.list(request.getHeaderNames());</span><br><span class="line">        <span class="keyword">for</span> (String headerName : headerNames) &#123;</span><br><span class="line">            List&lt;String&gt; headerValues = Collections.list(request.getHeaders(headerName));</span><br><span class="line">            <span class="keyword">for</span> (String headerValue : headerValues) &#123;</span><br><span class="line">                headers.add(headerName, headerValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> headers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/delegate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegateController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RoutingDelegate routingDelegate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * // <span class="doctag">@formatter</span>:off</span></span><br><span class="line"><span class="comment">     * 目标应用URI: /app/user/7</span></span><br><span class="line"><span class="comment">     * 前端完整地址: https://xx.xx.xx.xx/context/delegate/app/user/7</span></span><br><span class="line"><span class="comment">     * 代理目标地址: http://127.0.0.1/app/user/7</span></span><br><span class="line"><span class="comment">     * // <span class="doctag">@formatter</span>:on</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/**&quot;, method = &#123; RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT,</span></span><br><span class="line"><span class="meta">            RequestMethod.DELETE, RequestMethod.PATCH &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">delegate</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        ResponseEntity&lt;JsonNode&gt; responseEntity = routingDelegate.redirect(request, response, <span class="string">&quot;http://127.0.0.1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/context/delegate&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> responseEntity.getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h1><p>本文到此结束，感谢阅读。如果您觉得不错，请关注公众号【当我遇上你】，您的支持是我写作的最大动力。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;背景: 有些时候需要对一些接口进行透传, 由于没有任何逻辑, 我们无需直到请求响应对象到底是什么样的, 原样输入输出即可&lt;/p&gt;
&lt;h1 id=</summary>
      
    
    
    
    <category term="java" scheme="https://idea360.cn/categories/java/"/>
    
    
    <category term="http" scheme="https://idea360.cn/tags/http/"/>
    
    <category term="代理" scheme="https://idea360.cn/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>springboot解决跨域</title>
    <link href="https://idea360.cn/2022/04/18/springboot-cors/"/>
    <id>https://idea360.cn/2022/04/18/springboot-cors/</id>
    <published>2022-04-18T15:53:09.000Z</published>
    <updated>2022-04-18T16:03:03.275Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本地模拟跨域请求以及结果分析"><a class="markdownIt-Anchor" href="#本地模拟跨域请求以及结果分析"></a> 本地模拟跨域请求以及结果分析</h2><ol><li>写一个前端HTML页面放于idea（idea可充当静态web服务器）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CORS跨域<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;margin-top: 100px;font-size: 60px;color: brown;cursor: pointer;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">onclick</span>=<span class="string">&quot;sendAjaxReq()&quot;</span>&gt;</span>发送Ajax请求<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">sendAjaxReq</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            type: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">            url: <span class="string">&quot;http://localhost:8080/test/cors&quot;</span>,</span></span><br><span class="line"><span class="javascript">            success: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;成功！&quot;</span> + message);</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            error: <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;失败！&quot;</span> + a.statusText);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>写一个控制器Controller处理页面发送的ajax请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cuishiying</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test/cors&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">testCors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello cors&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>利用idea的web服务器能力运行html页面, 地址为: <a href="http://localhost:63342/cors-demo/static/index.html">http://localhost:63342/cors-demo/static/index.html</a></li></ol><p>请注意这个页面的访问地址的是 <a href="http://localhost:63342/cors-demo/static/index.html">http://localhost:63342/cors-demo/static/index.html</a>，而点击这个&quot;发送Ajax请求&quot;按钮要发送的地址是 <a href="http://localhost:8080/test/cors">http://localhost:8080/test/cors</a>，两者端口号不一样说明是不同的域，因此此ajax请求它必定属于跨域请求（CORS请求）</p><ol start="4"><li>点击发送按钮，查看控制台的结果</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#39;http:&#x2F;&#x2F;localhost:8080&#x2F;test&#x2F;cors&#39; from origin &#39;http:&#x2F;&#x2F;localhost:63342&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</span><br><span class="line">失败！error</span><br></pre></td></tr></table></figure><ol start="5"><li>配置跨域, 再次访问 <a href="http://localhost:63342/cors-demo/static/index.html">http://localhost:63342/cors-demo/static/index.html</a>, 控制台输出 <code>成功！hello cors</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cuishiying</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> CorsConfiguration <span class="title">buildConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> corsConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, buildConfig());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h1><p>本文到此结束，感谢阅读。如果您觉得不错，请关注公众号【当我遇上你】，您的支持是我写作的最大动力。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;本地模拟跨域请求以及结果分析&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#本地模拟跨域请求以及结果分析&quot;&gt;&lt;/a&gt; 本地模拟跨域请求以及结果分析&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;写一个前端HTML页面放于idea（idea可充当静态web</summary>
      
    
    
    
    <category term="springboot" scheme="https://idea360.cn/categories/springboot/"/>
    
    
    <category term="springboot" scheme="https://idea360.cn/tags/springboot/"/>
    
    <category term="跨域" scheme="https://idea360.cn/tags/%E8%B7%A8%E5%9F%9F/"/>
    
    <category term="cors" scheme="https://idea360.cn/tags/cors/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg视频处理入门教程</title>
    <link href="https://idea360.cn/2022/04/01/ffmpeg/"/>
    <id>https://idea360.cn/2022/04/01/ffmpeg/</id>
    <published>2022-04-01T14:34:18.000Z</published>
    <updated>2022-04-01T15:01:33.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><p>视频文件本身其实是一个容器（container），里面包括了视频和音频，也可能有字幕等其他内容</p><p>查看 FFmpeg 支持的容器.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -formats</span><br></pre></td></tr></table></figure><p>编码格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">H.262</span><br><span class="line">H.264</span><br><span class="line">H.265</span><br></pre></td></tr></table></figure><p>查看 FFmpeg 支持的编码格式，视频编码和音频编码都在内</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -codecs</span><br></pre></td></tr></table></figure><p>FFmpeg 内置的视频编码器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">libx264：最流行的开源 H.264 编码器</span><br><span class="line">NVENC：基于 NVIDIA GPU 的 H.264 编码器</span><br><span class="line">libx265：开源的 HEVC 编码器</span><br><span class="line">libvpx：谷歌的 VP8 和 VP9 编码器</span><br><span class="line">libaom：AV1 编码器</span><br></pre></td></tr></table></figure><p>音频编码器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">libfdk-aac</span><br><span class="line">aac</span><br></pre></td></tr></table></figure><p>查看 FFmpeg 已安装的编码器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -encoders</span><br></pre></td></tr></table></figure><h1 id="ffmpeg-的使用格式"><a class="markdownIt-Anchor" href="#ffmpeg-的使用格式"></a> FFmpeg 的使用格式</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg \</span><br><span class="line">[全局参数] \</span><br><span class="line">[输入文件参数] \</span><br><span class="line">-i [输入文件] \</span><br><span class="line">[输出文件参数] \</span><br><span class="line">[输出文件]</span><br></pre></td></tr></table></figure><p>eg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg \</span><br><span class="line">-y \ # 全局参数</span><br><span class="line">-c:a libfdk_aac -c:v libx264 \ # 输入文件参数</span><br><span class="line">-i input.mp4 \ # 输入文件</span><br><span class="line">-c:v libvpx-vp9 -c:a libvorbis \ # 输出文件参数</span><br><span class="line">output.webm # 输出文件</span><br></pre></td></tr></table></figure><p>上面的命令将 mp4 文件转成 webm 文件，这两个都是容器格式。输入的 mp4 文件的音频编码格式是 aac，视频编码格式是 H.264；输出的 webm 文件的视频编码格式是 VP9，音频格式是 Vorbis。</p><p>如果不指明编码格式，FFmpeg 会自己判断输入文件的编码。因此，上面的命令可以简单写成下面的样子。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.avi output.mp4</span><br></pre></td></tr></table></figure><h1 id="常用命令行参数"><a class="markdownIt-Anchor" href="#常用命令行参数"></a> 常用命令行参数</h1><p>FFmpeg 常用的命令行参数如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-c：指定编码器</span><br><span class="line">-c copy：直接复制，不经过重新编码（这样比较快）</span><br><span class="line">-c:v：指定视频编码器</span><br><span class="line">-c:a：指定音频编码器</span><br><span class="line">-i：指定输入文件</span><br><span class="line">-an：去除音频流</span><br><span class="line">-vn： 去除视频流</span><br><span class="line">-preset：指定输出的视频质量，会影响文件的生成速度，有以下几个可用的值 ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow。</span><br><span class="line">-y：不经过确认，输出时直接覆盖同名文件。</span><br></pre></td></tr></table></figure><h1 id="常见用法"><a class="markdownIt-Anchor" href="#常见用法"></a> 常见用法</h1><p><strong>查看文件信息</strong></p><p>查看视频文件的元信息，比如编码格式和比特率，可以只使用-i参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i /Users/cuishiying/Movies/dhxy.mp4</span><br></pre></td></tr></table></figure><p>上面命令会输出很多冗余信息，加上-hide_banner参数，可以只显示元信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i /Users/cuishiying/Movies/dhxy.mp4 -hide_banner</span><br></pre></td></tr></table></figure><p><strong>把本地音视频推到流服务器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i /Users/cuishiying/Movies/dhxy.mp4 -f flv rtmp://127.0.0.1:1935/live/123</span><br></pre></td></tr></table></figure><p><strong>查看当前本本支持的摄像头设备情况</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -f 指定使用 avfoundation 采集数据</span></span><br><span class="line">ffmpeg -f avfoundation -list_devices true -i &quot;&quot;</span><br></pre></td></tr></table></figure><p><strong>本地摄像头推流</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f avfoundation -framerate 30 -video_size 640x480 -i  &quot;0&quot; -vcodec libx264 -preset ultrafast -acodec libfaac -f flv  rtmp://127.0.0.1:1935/live/123</span><br></pre></td></tr></table></figure><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><ul><li><a href="https://www.ruanyifeng.com/blog/2020/01/ffmpeg.html">https://www.ruanyifeng.com/blog/2020/01/ffmpeg.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概念&quot;&gt;&lt;/a&gt; 概念&lt;/h1&gt;
&lt;p&gt;视频文件本身其实是一个容器（container），里面包括了视频和音频，也可能有字幕等其他内容&lt;/p&gt;
&lt;p&gt;查看 FFmpeg 支持的容器.&lt;</summary>
      
    
    
    
    <category term="ffmpeg" scheme="https://idea360.cn/categories/ffmpeg/"/>
    
    
    <category term="ffmpeg" scheme="https://idea360.cn/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>重看spring-cloud-gateway负载均衡</title>
    <link href="https://idea360.cn/2022/03/27/spring-cloud-gateway-lb/"/>
    <id>https://idea360.cn/2022/03/27/spring-cloud-gateway-lb/</id>
    <published>2022-03-27T03:57:09.000Z</published>
    <updated>2022-04-16T07:44:30.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>之前有好几篇文章讲了 <code>灰度</code>, <code>网关</code>, <code>负载均衡</code> 等, 本篇从源码角度分析几种负载均衡组件的实现。</p><h1 id="基于ribbon和静态ip实现负载均衡"><a class="markdownIt-Anchor" href="#基于ribbon和静态ip实现负载均衡"></a> 基于ribbon和静态ip实现负载均衡</h1><p>由于之前讲过很多次基于 <code>nacos</code> 的服务发现, 这里的案例直接用基于 <code>静态ip</code> 的实例来演示。</p><h2 id="搭建-provider-服务"><a class="markdownIt-Anchor" href="#搭建-provider-服务"></a> 搭建 <code>provider</code> 服务</h2><p><code>provider</code> 服务是普通的web项目。首先提供对外暴露的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.idea360.provider.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cuishiying</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;version:0&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试接口, 对外提供访问</span></span><br><span class="line"><span class="comment">     * http://localhost:9001/test/port</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/port&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">port</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;port=%s, version=%s&quot;</span>, env.getProperty(<span class="string">&quot;local.server.port&quot;</span>), version);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次在实际的环境中, 可能服务进程还在, 但是服务已不能对外提供访问, 所以我们这里提供一个 <code>巡检</code> 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.idea360.provider.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cuishiying</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HealthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网关监控检查</span></span><br><span class="line"><span class="comment">     * http://localhost:9001/heath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/heath&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">heath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;up&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包后我们启动2个实例用来后续测试, 端口分别是 <code>9001</code> 和 <code>9002</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar target/provider.jar --server.port=9001</span><br><span class="line">java -jar target/provider.jar --server.port=9002</span><br></pre></td></tr></table></figure><p>测试下接口是否正常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:9001/test/port</span><br><span class="line">port=9001, version=0% </span><br><span class="line"></span><br><span class="line">curl 127.0.0.1:9002/test/port</span><br><span class="line">port=9002, version=0%</span><br></pre></td></tr></table></figure><h2 id="搭建-gateway-服务"><a class="markdownIt-Anchor" href="#搭建-gateway-服务"></a> 搭建 <code>gateway</code> 服务</h2><p>这里我们的依赖包不需要服务发现相关的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网关的路由配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">static-ip</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://static-ip-load-balanced-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/provider/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment">#过滤器StripPrefix，作用是去掉请求路径的最前面n个部分截取掉。StripPrefix=1就代表截取路径的个数为1，比如前端过来请求http://localhost:8080/provider/test/port，匹配成功后，路由到后端的请求路径就会变成http://localhost:xx/test/port</span></span><br><span class="line"></span><br><span class="line"><span class="attr">static-ip-load-balanced-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="comment"># 负载地址</span></span><br><span class="line">    <span class="attr">listOfServers:</span> <span class="string">http://localhost:9001,</span> <span class="string">http://localhost:9002</span></span><br><span class="line">    <span class="comment"># 负载轮询策略</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RoundRobinRule</span></span><br><span class="line">    <span class="comment"># 健康检查</span></span><br><span class="line">    <span class="attr">NFLoadBalancerPingClassName:</span> <span class="string">cn.idea360.gateway.actuator.HealthExamination</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">INFO</span></span><br><span class="line">    <span class="attr">cn.idea360.gateway.actuator.HealthExamination:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><p>我们在网关负载时用到了健康检查, 这里我们需要配置下 <code>RestTemplate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.idea360.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cuishiying</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>健康检查类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.idea360.gateway.actuator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IPing;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.Server;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监控检查由ribbon自动巡检, 非调用接口触发</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cuishiying</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HealthExamination</span> <span class="keyword">implements</span> <span class="title">IPing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAlive</span><span class="params">(Server server)</span> </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;http://&quot;</span> + server.getId() + <span class="string">&quot;/heath&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ResponseEntity&lt;String&gt; heath = restTemplate.getForEntity(url, String.class);</span><br><span class="line">            <span class="keyword">if</span> (heath.getStatusCode() == HttpStatus.OK) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;ping &#123;&#125; success and response is &#123;&#125;&quot;</span>, url, heath.getBody());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            log.warn(<span class="string">&quot;ping &#123;&#125; error and response is &#123;&#125;&quot;</span>, url, heath.getBody());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;ping &#123;&#125; failed&quot;</span>, url);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网关请求测试负载是否复合预期, 经过测试, 请求轮询负载到 <code>provider</code> 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:8080/provider/test/port</span><br></pre></td></tr></table></figure><p>同时查看 <code>gateway</code> 的日志可以看到健康检查在定时巡检</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping http:&#x2F;&#x2F;localhost:9002&#x2F;heath success and response is up</span><br><span class="line">ping http:&#x2F;&#x2F;localhost:9001&#x2F;heath success and response is up</span><br></pre></td></tr></table></figure><h2 id="负载源码分析"><a class="markdownIt-Anchor" href="#负载源码分析"></a> 负载源码分析</h2><p>大部分的 <code>http</code> 请求都是通过 <code>filter</code> 进行增强和逻辑处理的。所以, 首先我们需要找到请求是通过哪个过滤器处理的。</p><ol><li><p><code>application.yml</code> 配置文件中配置了负载均衡策略 <code>com.netflix.loadbalancer.RoundRobinRule</code>, 所以我们从这里作为突破口。在 <code>choose(ILoadBalancer lb, Object key)</code> 方法打断点, 然后 <a href="http://127.0.0.1:8080/provider/test/port">从网关请求</a>, 发现请求经过断点, 说明判断正确。</p></li><li><p>查看方法栈, 可以看到请求来自于 <code>org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient#choose</code>。继续往前追踪, 可以看到请求来自于 <code>org.springframework.cloud.gateway.filter.LoadBalancerClientFilter#choose</code>。</p><ul><li><p>负载均衡器的目的是为了在集群实例中按指定策略帮我挑选出一个实例。它本身并不实际发出 <code>http</code> 请求。</p></li><li><p>实际的请求是通过后续的 <code>filter</code> 中完成的。具体可以查看 <code>org.springframework.cloud.gateway.filter.NettyRoutingFilter#filter</code> 中的实现逻辑。</p></li><li><p>默认的 <code>httpclient</code> 在 <code>org.springframework.cloud.gateway.config.GatewayAutoConfiguration.NettyConfiguration#gatewayHttpClient</code> 注入, 为 <code>netty</code> 中的 <code>HttpClient</code></p></li></ul></li></ol><p>完整的调用链如下(<a href="https://juejin.cn/post/6882614799256485901">参考</a>):</p><p><img src="https://raw.githubusercontent.com/qidian360/oss/master/images/spring-cloud-gateway%E8%B0%83%E7%94%A8%E6%A0%88.png" alt="" /></p><ol start="3"><li>以上的断点分析没有 <code>spring-cloud-commons</code> 包的 <code>org.springframework.cloud.client.loadbalancer.LoadBalancerClient#execute</code> 啥事儿了。其实该方法和 <code>@LoadBalanced</code> 密切相关, 而该注解只和 <code>RestTemplate</code> 相关。更多应用于服务间调用。</li></ol><p>修改下 <code>RestTemplate</code> 配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网关巡检 <code>/heath</code> 是通过 <code>RestTemplate</code> 的 <code>http</code> 协议通信的。方法栈如下:</p><pre><code>+ org.springframework.web.client.RestTemplate#doExecute+ org.springframework.http.client.AbstractClientHttpRequest#execute+ org.springframework.http.client.AbstractBufferingClientHttpRequest#executeInternal(org.springframework.http.HttpHeaders)+ org.springframework.http.client.InterceptingClientHttpRequest#executeInternal+ org.springframework.http.client.InterceptingClientHttpRequest.InterceptingRequestExecution#execute+ org.springframework.cloud.client.loadbalancer.LoadBalancerInterceptor#intercept</code></pre><p>查看 <code>LoadBalancerInterceptor</code> 源码可知, 这样请求就经过了 <code>LoadBalancerClient</code> 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadBalancerInterceptor</span> <span class="keyword">implements</span> <span class="title">ClientHttpRequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancer;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">intercept</span><span class="params">(<span class="keyword">final</span> HttpRequest request, <span class="keyword">final</span> <span class="keyword">byte</span>[] body,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> URI originalUri = request.getURI();</span><br><span class="line">        String serviceName = originalUri.getHost();</span><br><span class="line">        Assert.state(serviceName != <span class="keyword">null</span>,</span><br><span class="line">                <span class="string">&quot;Request URI does not contain a valid hostname: &quot;</span> + originalUri);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.loadBalancer.execute(serviceName,</span><br><span class="line">                <span class="keyword">this</span>.requestFactory.createRequest(request, body, execution));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基于ribbon和nacos实现负载均衡"><a class="markdownIt-Anchor" href="#基于ribbon和nacos实现负载均衡"></a> 基于Ribbon和nacos实现负载均衡</h1><h2 id="provider实现服务发现"><a class="markdownIt-Anchor" href="#provider实现服务发现"></a> provider实现服务发现</h2><ol><li>引入nacos服务发现依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>启动类添加注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure><h2 id="gateway实现服务发现"><a class="markdownIt-Anchor" href="#gateway实现服务发现"></a> gateway实现服务发现</h2><ol><li>引入nacos服务发现依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于nacos中默认引入了 <code>spring-cloud-starter-netflix-ribbon</code>, 所以该包可以不引入。</p><ol start="2"><li>由于基于服务发现来调用服务, 所以静态ip配置不再需要</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">static-ip</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://provider</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/provider/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment">#过滤器StripPrefix，作用是去掉请求路径的最前面n个部分截取掉。StripPrefix=1就代表截取路径的个数为1，比如前端过来请求http://localhost:8080/provider/test/port，匹配成功后，路由到后端的请求路径就会变成http://localhost:xx/test/port</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">INFO</span></span><br></pre></td></tr></table></figure><ol start="3"><li>启动类添加服务发现注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:8080/provider/test/port</span><br></pre></td></tr></table></figure><p>结果是轮询输出 <code>port=9001, version=0%</code> 和 <code>port=9002, version=0%</code></p><h2 id="源码分析"><a class="markdownIt-Anchor" href="#源码分析"></a> 源码分析</h2><ol><li><p>同样在 <code>com.netflix.loadbalancer.RoundRobinRule#choose(com.netflix.loadbalancer.ILoadBalancer, java.lang.Object)</code> 打断点查看调用链。说明请求并不经过 <code>ribbon</code> 内置的轮询策略。</p></li><li><p>由于是nacos在做服务发现相关的逻辑。很可能是 <code>nacos</code> 接管了负载策略。查看 <code>com.netflix.loadbalancer.IRule#choose</code> 实现类，发现确实有nacos做的负载策略。 所以我们在 <code>com.alibaba.cloud.nacos.ribbon.NacosRule#choose</code> 打断点继续观察。然而请求依旧没有进入断点。</p></li><li><p>根据之前的经验, 我们在 <code>org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient#choose(java.lang.String, java.lang.Object)</code> 打断点, 这次进入了断点。调用链如下:</p></li></ol><ul><li>org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient#getServer(com.netflix.loadbalancer.ILoadBalancer, java.lang.Object)</li><li>com.netflix.loadbalancer.ZoneAwareLoadBalancer#chooseServer</li><li>com.netflix.loadbalancer.BaseLoadBalancer#chooseServer</li><li>com.netflix.loadbalancer.PredicateBasedRule#choose</li></ul><blockquote><p>其实ribbon是推荐 <code>AvailabilityFilteringRule</code> 策略的</p></blockquote><ol start="4"><li>修改负载均衡策略</li></ol><p><code>org.springframework.cloud.netflix.ribbon.RibbonClientConfiguration#ribbonRule</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">(IClientConfig config)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.propertiesFactory.isSet(IRule.class, name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.propertiesFactory.get(IRule.class, config, name);</span><br><span class="line">    &#125;</span><br><span class="line">    ZoneAvoidanceRule rule = <span class="keyword">new</span> ZoneAvoidanceRule();</span><br><span class="line">    rule.initWithNiwsConfig(config);</span><br><span class="line">    <span class="keyword">return</span> rule;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在源码中, 可以看到默认的负载均衡策略是可以覆写的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.idea360.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.RoundRobinRule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cuishiying</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonLbConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RoundRobinRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次测试, 发现这次请求进入到了 <code>com.netflix.loadbalancer.RoundRobinRule#choose(com.netflix.loadbalancer.ILoadBalancer, java.lang.Object)</code></p><ol start="5"><li>再次通过断点验证下, 发现 <code>org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient#execute(java.lang.String, org.springframework.cloud.client.ServiceInstance, org.springframework.cloud.client.loadbalancer.LoadBalancerRequest&lt;T&gt;)</code> 依然没有被执行。说明该方法确实只和 <code>@LoadBalanced</code> 和 <code>RestTemplate</code> 相关。</li></ol><h1 id="基于spring-cloud-starter-loadbalancer实现负载均衡"><a class="markdownIt-Anchor" href="#基于spring-cloud-starter-loadbalancer实现负载均衡"></a> 基于spring-cloud-starter-loadbalancer实现负载均衡</h1><p>ReactiveLoadBalancerClientFilter-ReactiveLoadBalancer</p><p>未完待续…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;之前有好几篇文章讲了 &lt;code&gt;灰度&lt;/code&gt;, &lt;code&gt;网关&lt;/code&gt;, &lt;code&gt;负载均衡&lt;/code&gt; 等, 本篇从源码角</summary>
      
    
    
    
    <category term="spring" scheme="https://idea360.cn/categories/spring/"/>
    
    
    <category term="spring" scheme="https://idea360.cn/tags/spring/"/>
    
    <category term="gateway" scheme="https://idea360.cn/tags/gateway/"/>
    
    <category term="网关" scheme="https://idea360.cn/tags/%E7%BD%91%E5%85%B3/"/>
    
    <category term="lb" scheme="https://idea360.cn/tags/lb/"/>
    
    <category term="负载均衡" scheme="https://idea360.cn/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>ConfigurationProperties介绍</title>
    <link href="https://idea360.cn/2022/01/23/springboot-ConfigurationProperties/"/>
    <id>https://idea360.cn/2022/01/23/springboot-ConfigurationProperties/</id>
    <published>2022-01-23T08:37:43.000Z</published>
    <updated>2022-01-23T12:04:21.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="configurationproperties介绍"><a class="markdownIt-Anchor" href="#configurationproperties介绍"></a> ConfigurationProperties介绍</h1><p>ConfigurationProperties是一个注解，可以标注在一个Class上，这样Spring Boot会从Environment中获取其属性对应的属性值给其进行注入。比如下面的代码定义中，Spring Boot在实例化TestConfigurationProperties这个bean时就会把从Environment中获取属性名为appName的属性值赋给TestConfigurationProperties的appName属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties</span><br><span class="line">@Data</span><br><span class="line">public class TestConfigurationProperties &#123;</span><br><span class="line"></span><br><span class="line">    private String appName;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以当你的application.properties文件中定义了<code>appName=Test</code>时就会把<code>Test</code>赋值给TestConfigurationProperties对象的appName属性。实际上下面的定义和<code>appName=Test</code>是等价的。也就是说在从Environment中获取属性值绑定到ConfigurationProperties标注的对象上时，对大小写是不敏感的，而且其中的<code>-</code>和<code>_</code>都会被剔除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">APPname&#x3D;Test</span><br><span class="line">app-Name&#x3D;Test</span><br><span class="line">app-name&#x3D;Test</span><br><span class="line">app_name&#x3D;Test</span><br></pre></td></tr></table></figure><p><code>@ConfigurationProperties</code>标注的Class通常用于从Environment中绑定属性值，然后供bean容器中的其它bean使用，通常是跟<code>@Configuration</code>标注的Class一起使用，其内部会注入<code>@ConfigurationProperties</code>标注的对象用来定义bean。如果你去查看Spring Boot的AutoConfiguration包，你会发现里面基本都是这样的用法。单独跟<code>@Configuration</code>标注的Class一起使用时，通常还会在<code>@Configuration</code>标注的Class上加上<code>@EnableConfigurationProperties</code>指定允许使用的标注了<code>@ConfigurationProperties</code>的配置类，这样Spring Boot就会把它实例化为一个bean，然后在<code>@Configuration</code>配置类中就可以进行依赖注入并进行使用了。以下代码就是一个简单的示例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableConfigurationProperties(TestConfigurationProperties.class)</span><br><span class="line">public class TestConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private TestConfigurationProperties props;</span><br><span class="line">    </span><br><span class="line">    @Bean</span><br><span class="line">    public Object initBean() &#123;</span><br><span class="line">        &#x2F;&#x2F;使用注入的ConfigurationProperties标注的对象进行bean构造</span><br><span class="line">        return this.props.getAppName();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当<code>@ConfigurationProperties</code>标注的Class本身就标注为一个bean定义时就不需要在<code>@Configuration</code>标注的Class上使用<code>@EnableConfigurationProperties</code>进行指定了，可以直接进行注入，因为它已经是一个bean了。</p></blockquote><h2 id="指定需要映射的前缀"><a class="markdownIt-Anchor" href="#指定需要映射的前缀"></a> 指定需要映射的前缀</h2><p>在application.properties文件中定义的属性通常不是单一名称的属性，而是以<code>a.b.c.d</code>这种形式构成的属性，多个层级之间以点分隔，从而形成不同的分类。这种属性需要绑定到<code>@ConfigurationProperties</code>标注的对象属性上时可以指定一个通用的前缀，然后只对去除前缀之后的内容进行绑定。下面的代码指定了绑定属性时的前缀是<code>test.config</code>，所以TestConfigurationProperties对象的username属性将绑定配置文件中的<code>test.config.username</code>属性，password属性将匹配配置文件中的<code>test.config.password</code>属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(&quot;test.config&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class TestConfigurationProperties &#123;</span><br><span class="line"></span><br><span class="line">    private String username;</span><br><span class="line">    </span><br><span class="line">    private String password;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当在application.properties文件中进行了如下定义时，TestConfigurationProperties对象的username属性绑定的值是<code>u1</code>，password属性绑定的值是<code>p1</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.config.username&#x3D;u1</span><br><span class="line">test.config.password&#x3D;p1</span><br></pre></td></tr></table></figure><blockquote><p><code>@ConfigurationProperties</code>中有一个属性value用来指定前缀，属性prefix也可以用来指定前缀。有一个<code>ignoreInvalidFields</code>用来指定当需要绑定的属性值不合法时是否需要忽略该属性绑定，属性不合法主要是指类型不匹配。比如需要绑定值的属性定义的类型是int，通过自动绑定机制获取到的属性值是<code>abc</code>，它就不能转换为int。<code>ignoreInvalidFields</code>默认是<code>false</code>，即当出现属性不合法时将不忽略，将抛出异常。还有一个<code>ignoreUnknownFields</code>属性，用来指定当需要绑定值的属性没有找到对应的绑定属性时是否将忽略，默认是<code>true</code>。</p></blockquote><h2 id="级联绑定"><a class="markdownIt-Anchor" href="#级联绑定"></a> 级联绑定</h2><p>下面的代码中TestConfigurationProperties的inner属性是一个对象，需要对其进行绑定时需要以<code>.</code>进行级联绑定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(&quot;test.config&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class TestConfigurationProperties &#123;</span><br><span class="line"></span><br><span class="line">    private Inner inner;</span><br><span class="line">    </span><br><span class="line">    @Data</span><br><span class="line">    public static class Inner &#123;</span><br><span class="line">        private String username;</span><br><span class="line">        private String password;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在application.properties文件中进行如下定义会为TestConfigurationProperties对象的inner属性绑定一个Inner对象，其username属性的值是u1，password的值是p1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.config.inner.username&#x3D;u1</span><br><span class="line">test.config.inner.password&#x3D;p1</span><br></pre></td></tr></table></figure><p>在application.yml文件中进行如下定义与上面的定义等价。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test.config.inner:</span><br><span class="line">  username: u1</span><br><span class="line">  password: p1</span><br></pre></td></tr></table></figure><h2 id="绑定集合属性"><a class="markdownIt-Anchor" href="#绑定集合属性"></a> 绑定集合属性</h2><p>下面的代码中使用<code>@ConfigurationProperties</code>标注的Class有一个List类型的属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(&quot;test.config&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class TestConfigurationProperties &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;String&gt; list;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要给List绑定值时，可以通过<code>[index]</code>的形式指定值，下面的代码就定义了List中的三个元素，分别是<code>ABC</code>、<code>DEF</code>和<code>GHI</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test.config.list[0]&#x3D;ABC</span><br><span class="line">test.config.list[1]&#x3D;DEF</span><br><span class="line">test.config.list[2]&#x3D;GHI</span><br></pre></td></tr></table></figure><p>也可以使用英文逗号分隔List中的多个值，以下配置跟上面的配置是等价的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.config.list&#x3D;ABC,DEF,GHI</span><br></pre></td></tr></table></figure><blockquote><p>Set、Array类型的属性值绑定也可以使用类似的语法（索引和逗号分隔）。</p></blockquote><p>在YAML配置文件定义集合类型的值绑定时可以定义为如下这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test.config.list:</span><br><span class="line">  - ABC</span><br><span class="line">  - DEF</span><br><span class="line">  - GHI</span><br></pre></td></tr></table></figure><p>它也可以使用逗号分隔的多个值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.config.list: ABC,DEF,GHI</span><br></pre></td></tr></table></figure><p>如果需要绑定值的集合元素是一个对象怎么办呢？下面的代码中list属性的元素类型就是一个Inner对象，其中Inner对象又有username和password两个属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(&quot;test.config&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class TestConfigurationProperties &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;Inner&gt; list;</span><br><span class="line">    </span><br><span class="line">    @Data</span><br><span class="line">    public static class Inner &#123;</span><br><span class="line">        private String username;</span><br><span class="line">        private String password;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在application.properties文件中进行如下定义可以为list属性绑定两个Inner对象，其中第一个对象的username属性值为u1，password属性值为p1；第二个对象的username属性值为u2，password属性值为p2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test.config.list[0].username&#x3D;u1</span><br><span class="line">test.config.list[0].password&#x3D;p1</span><br><span class="line"></span><br><span class="line">test.config.list[1].username&#x3D;u2</span><br><span class="line">test.config.list[1].password&#x3D;p2</span><br></pre></td></tr></table></figure><p>在application.yml文件中进行如下定义与上面的定义等价，可以达到相同的值绑定效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test.config.list:</span><br><span class="line">  -</span><br><span class="line">    username: u1</span><br><span class="line">    password: p1</span><br><span class="line">  -</span><br><span class="line">    username: u2</span><br><span class="line">    password: p2</span><br></pre></td></tr></table></figure><h2 id="绑定map属性"><a class="markdownIt-Anchor" href="#绑定map属性"></a> 绑定Map属性</h2><p>下面的代码中拥有一个Map类型的map属性，Key和Value都是String类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(&quot;test.config&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class TestConfigurationProperties &#123;</span><br><span class="line"></span><br><span class="line">    private Map&lt;String, String&gt; map;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要给上面的map属性绑定值时可以使用<code>key=value</code>的形式，下面的配置会给map属性绑定两个元素，分别是key1对应value1，key2对应value2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.config.map.key1&#x3D;value1</span><br><span class="line">test.config.map.key2&#x3D;value2</span><br></pre></td></tr></table></figure><p>在application.yml文件中使用YAML语法定义就更简单了，以下定义等价于上面的定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test.config.map:</span><br><span class="line">  key1: value1</span><br><span class="line">  key2: value2</span><br></pre></td></tr></table></figure><p>如果需要绑定的Value是一个对象怎么办呢？比如map属性的定义改为如下这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(&quot;test.config&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class TestConfigurationProperties &#123;</span><br><span class="line"></span><br><span class="line">    private Map&lt;String, Inner&gt; map;</span><br><span class="line">    </span><br><span class="line">    @Data</span><br><span class="line">    public static class Inner &#123;</span><br><span class="line">        private String username;</span><br><span class="line">        private String password;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在application.properties文件中进行如下定义，会绑定两个元素到map，第一个元素的Key是key1，Value是一个Inner对象，其username属性的值是u1，password属性的值是p1；第二个元素的Key是key2，Value的username属性的值是u2，password属性的值是p2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test.config.map.key1.username&#x3D;u1</span><br><span class="line">test.config.map.key1.password&#x3D;p1</span><br><span class="line"></span><br><span class="line">test.config.map.key2.username&#x3D;u2</span><br><span class="line">test.config.map.key2.password&#x3D;p2</span><br></pre></td></tr></table></figure><p>在application.yml文件中定义时，如下定义等价于上面的定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test.config.map:</span><br><span class="line">  key1:</span><br><span class="line">    username: u1</span><br><span class="line">    password: p1</span><br><span class="line">  key2:</span><br><span class="line">    username: u2</span><br><span class="line">    password: p2</span><br></pre></td></tr></table></figure><h2 id="使用jsr303注解进行有效性校验"><a class="markdownIt-Anchor" href="#使用jsr303注解进行有效性校验"></a> 使用JSR303注解进行有效性校验</h2><p>可以对<code>@ConfigurationProperties</code>标注的Class的属性进行有效性校验，要使校验生效，需要在Class上添加<code>@org.springframework.validation.annotation.Validated</code>，还需要Classpath下拥有JSR303 Validator的实现，比如Hibernate Validator，这样Spring Boot在进行属性值绑定后会校验其合法性。下面的代码中就指定了name属性不能为null或空字符串，如果绑定后的值为空将抛出异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Validated</span><br><span class="line">@ConfigurationProperties(&quot;test.config&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class TestConfigurationProperties &#123;</span><br><span class="line"></span><br><span class="line">    @NotBlank(message&#x3D;&quot;参数test.config.name不能为空&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要进行属性值绑定的属性是一个对象，需要对该对象中的某个属性进行合法性校验，比如下面代码中需要对Inner对象中的username属性进行非空校验，则需要在inner属性上加上<code>@Valid</code>，同时在username属性上加上<code>@NotBlank</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Validated</span><br><span class="line">@ConfigurationProperties(&quot;test.config&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class TestConfigurationProperties &#123;</span><br><span class="line"></span><br><span class="line">    @NotBlank(message&#x3D;&quot;参数test.config.name不能为空&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    </span><br><span class="line">    @Valid</span><br><span class="line">    private Inner inner;</span><br><span class="line">    </span><br><span class="line">    @Data</span><br><span class="line">    public static class Inner &#123;</span><br><span class="line">        </span><br><span class="line">        @NotBlank(message&#x3D;&quot;参数test.config.inner.username不能为空&quot;)</span><br><span class="line">        private String username;</span><br><span class="line">        private String password;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绑定属性值到第三方jar中包含的class"><a class="markdownIt-Anchor" href="#绑定属性值到第三方jar中包含的class"></a> 绑定属性值到第三方jar中包含的Class</h2><p>如果需要绑定属性值到第三方jar中包含的Class对象，我们是无法直接在Class上加上<code>@ConfigurationProperties</code>注解的，这时候可以在<code>@Configuration</code>标注的Class中定义一个需要绑定值的Class类型的bean，然后在该方法上加上<code>@ConfigurationProperties</code>。比如下面代码中通过<code>initTestConfigurationProperties()</code>定义了一个TestConfigurationProperties类型的bean，在该方法上加上了<code>@ConfigurationProperties</code>，Spring Boot就会为该bean进行属性值绑定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class TestConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConfigurationProperties(&quot;test.config&quot;)</span><br><span class="line">    public TestConfigurationProperties initTestConfigurationProperties() &#123;</span><br><span class="line">        return new TestConfigurationProperties();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a class="markdownIt-Anchor" href="#参考文档"></a> 参考文档</h2><ul><li><p><a href="https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/html/boot-features-external-config.html#boot-features-external-config-typesafe-configuration-properties">https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/html/boot-features-external-config.html#boot-features-external-config-typesafe-configuration-properties</a></p></li><li><p><a href="https://developer.aliyun.com/article/671047">https://developer.aliyun.com/article/671047</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;configurationproperties介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#configurationproperties介绍&quot;&gt;&lt;/a&gt; ConfigurationProperties介绍&lt;/h1&gt;
&lt;p&gt;Con</summary>
      
    
    
    
    <category term="springboot" scheme="https://idea360.cn/categories/springboot/"/>
    
    
    <category term="spring" scheme="https://idea360.cn/tags/spring/"/>
    
    <category term="springboot" scheme="https://idea360.cn/tags/springboot/"/>
    
    <category term="ConfigurationProperties" scheme="https://idea360.cn/tags/ConfigurationProperties/"/>
    
  </entry>
  
  <entry>
    <title>java8</title>
    <link href="https://idea360.cn/2022/01/13/java8/"/>
    <id>https://idea360.cn/2022/01/13/java8/</id>
    <published>2022-01-13T12:42:17.000Z</published>
    <updated>2022-05-13T12:49:30.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>本篇主要记录一些基于java8常用特性的使用。</p><h1 id="urlencoded"><a class="markdownIt-Anchor" href="#urlencoded"></a> URLEncoded</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    params.put(<span class="string">&quot;uid&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    params.put(<span class="string">&quot;cid&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    String urlQuery = params.entrySet().stream().map(e -&gt; e.getKey() + <span class="string">&quot;=&quot;</span> + e.getValue()).collect(Collectors.joining(<span class="string">&quot;&amp;&quot;</span>));</span><br><span class="line">    System.out.printf(urlQuery); <span class="comment">// uid=1&amp;cid=2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;本篇主要记录一些基于java8常用特性的使用。&lt;/p&gt;
&lt;h1 id=&quot;urlencoded&quot;&gt;&lt;a class=&quot;markdownIt-Anc</summary>
      
    
    
    
    <category term="java" scheme="https://idea360.cn/categories/java/"/>
    
    
    <category term="java8" scheme="https://idea360.cn/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>easy-im</title>
    <link href="https://idea360.cn/2021/12/09/im/"/>
    <id>https://idea360.cn/2021/12/09/im/</id>
    <published>2021-12-08T16:01:08.000Z</published>
    <updated>2021-12-18T10:48:43.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="im参考"><a class="markdownIt-Anchor" href="#im参考"></a> IM参考</h1><ul><li><a href="https://github.com/defineYIDA/NoneIM.git">https://github.com/defineYIDA/NoneIM.git</a></li><li><a href="https://github.com/wildfirechat/server">https://github.com/wildfirechat/server</a></li><li><a href="https://mp.weixin.qq.com/s/52TcYdrYfwmd6B8AjdWtLw">https://mp.weixin.qq.com/s/52TcYdrYfwmd6B8AjdWtLw</a></li><li><a href="https://github.com/ryvengray/Netty-Distributed-IM">https://github.com/ryvengray/Netty-Distributed-IM</a></li><li><a href="https://zhuanlan.zhihu.com/p/401676544">https://zhuanlan.zhihu.com/p/401676544</a></li><li><a href="https://github.com/crossoverJie/cim">https://github.com/crossoverJie/cim</a></li><li><a href="http://www.52im.net/thread-2768-1-1.html">http://www.52im.net/thread-2768-1-1.html</a></li><li><a href="https://github.com/beardlessCat/im">https://github.com/beardlessCat/im</a></li><li><a href="https://github.com/JackJiang2011/MobileIMSDK">https://github.com/JackJiang2011/MobileIMSDK</a></li><li><a href="https://github.com/fuzhengwei/NaiveChat">https://github.com/fuzhengwei/NaiveChat</a></li></ul><h1 id="rpc参考"><a class="markdownIt-Anchor" href="#rpc参考"></a> RPC参考</h1><ul><li><a href="https://github.com/Veal98/RPC-FromScratch">https://github.com/Veal98/RPC-FromScratch</a></li><li><a href="http://xuyk.top/posts/x-rpc.html">http://xuyk.top/posts/x-rpc.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;im参考&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#im参考&quot;&gt;&lt;/a&gt; IM参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/defineYIDA/NoneIM.git&quot;&gt;https://g</summary>
      
    
    
    
    <category term="im" scheme="https://idea360.cn/categories/im/"/>
    
    
    <category term="im" scheme="https://idea360.cn/tags/im/"/>
    
  </entry>
  
</feed>
